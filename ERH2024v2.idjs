const {
  app,
  Page,
  Pages,
  TextFrame,
  TextFrames,
  TextVariable,
  TextVariableInstance,
  VariableTypes,
} = require("indesign");

/**
 * isERHItem --- Checking whether a text variable is used in the ERH script
 *
 * @returns true/false or array in case of collection
 */
TextVariable.prototype.isERHItem = function () {
  const check = (tv) => {
    return (
      tv.variableType.equals(VariableTypes.MATCH_PARAGRAPH_STYLE_TYPE) && //text variable type must be MATCH_PARAGRAPH_STYLE_TYPE
      !!tv.associatedInstances.length // whether there are instances of the text variable on the parent pages
    );
  };

  let ret = this.getElements().map((element) => check(element)); //check every item
  if (ret.length == 1) return ret[0]; //return value if this isn't a collection
  return ret; //return an array of values instead
};

/**
 * isERHItem --- Checking whether a text variable instance is used in the ERH script
 *
 * @returns true/false or array in case of collection
 */
TextVariableInstance.prototype.isERHItem = function () {
  const check = (tvi) => {
    let atv = tvi.associatedTextVariable;
    if (!!atv && atv.isValid) {
      return atv.isERHItem();
    } else return false;
  };

  let ret = this.getElements().map((element) => check(element));
  if (ret.length == 1) return ret[0];
  return ret;
};

/**
 * ERHMarker --- Labeling of text frames from the parent page that contain instances
 * of the required text variables of type MATCH_PARAGRAPH_STYLE_TYPE
 */
Page.prototype.ERHMarker = function () {
  this.getElements()
    .filter((page) => page.parent.constructorName === "MasterSpread")
    .forEach((page) => {
      page.textFrames
        .everyItem()
        .getElements()
        .filter((tf) => !tf.nextTextFrame && !tf.previousTextFrame)
        .filter((tf) =>
          tf.textVariableInstances
            .everyItem()
            .getElements()
            .some((elx) => elx.isERHItem())
        )
        .forEach((tf) => {
          tf.label = `ERHmaster_${tf.id}`;
        });
    });
};

/**
 * ERHOverride --- Overriding parent page's textframes with ERH text variable instances
 */
Page.prototype.ERHOverride = function () {
  this.getElements().forEach((page) => {
    page.masterPageItems
      .filter((mpi) => mpi.constructorName === "TextFrame")
      .filter((tf) => tf.label.startsWith("ERHmaster_"))
      .forEach((tf) => {
        let newTF = tf.override(page);
        newTF.label = `ERH_${newTF.id}_${tf.id}`;
      });
  });
};

/**
 * findSourceParagraph --- Search for the original paragraph on which
 * the instance of the text variable is based (TextVariableInstance based)
 * @returns array of Paragraph-s
 */
TextVariableInstance.prototype.findSourceParagraph = function () {
  return this.getElements()
    .filter((tvi) =>
      tvi.associatedTextVariable.variableType.equals(
        VariableTypes.MATCH_PARAGRAPH_STYLE_TYPE
      )
    )
    .filter(
      (tvi) =>
        tvi.storyOffset.parentTextFrames[0].parentPage.parent
          .constructorName === "Spread"
    )
    .map((tvi) => {
      let paraStyle =
          tvi.associatedTextVariable.variableOptions.appliedParagraphStyle,
        text = tvi.resultText,
        strategy = tvi.associatedTextVariable.variableOptions.searchStrategy,
        lastPage = tvi.storyOffset.parentTextFrames[0].parentPage;

      let found = app.activeDocument.pages
        .itemByRange(app.activeDocument.pages.firstItem(), lastPage)
        .getElements()
        .reverse()
        .reduce((filtered, page) => {
          let foundOnCurrentPage = page.textFrames
            .everyItem()
            .getElements()
            .map((tf) => {
              if (!!tf.paragraphs.length) {
                return tf.paragraphs.everyItem().getElements();
              }
            })
            .filter((para) => !!para && para.isValid)
            .filter((para) => para.appliedParagraphStyle.id === paraStyle.id)
            .filter((para) => {
              return String(para.contents)
                .replaceAll("\x0A", "") //Replace all Forced Line Breaks by Empty String HERE
                .startsWith(text);
            });

          !!foundOnCurrentPage.length && filtered.push(foundOnCurrentPage);
          return filtered;
        }, []);

      return found;
    });
};

/**
 * Redesign of the text frame with a Running Header
 * Not supported in this version:
 * (1) character cases, selected in text variable panel;
 * (2) preferred markup: handling line break markers for multi-line running headers
 */
TextFrames.prototype.ERHRebuild = function () {
  this.everyItem()
    .getElements()
    .filter((tf) => tf.label.startsWith("ERH_"))
    .forEach((tf) => {
      let masterTF = app.activeDocument.pageItems
        .itemByID(+String(tf.label).split("_")[2])
        .getElements()[0];

      if (!tf.textVariableInstances.length) tf.removeOverride();

      let allTextVariableInstances = tf.textVariableInstances
        .everyItem()
        .getElements()
        .filter((tvi) =>
          tvi.associatedTextVariable.variableType.equals(
            VariableTypes.MATCH_PARAGRAPH_STYLE_TYPE
          )
        )
        .map((tvi) => tvi.findSourceParagraph())
        .flat(3); // :)

      let result = "";

      if (!!allTextVariableInstances.length) {
        // Only if something was found !!!
        result = String(masterTF.contents)
          .split("")
          .map((c, f) => {
            if (c !== "\x18") return c; //If not a Text variable placeholder mark

            f = allTextVariableInstances.shift(); //Take the first paragraph on the page
            return "".concat(
              String(f?.bulletsAndNumberingResultText) || "", //If the paragraph is numbered, take that number.
              "",
              String(f?.contents)
                .replaceAll(/\n/gm, " ") // Replace all Forced Line Breaks by Space HERE
                .replaceAll(/[\u0004]/gm, "") //Footnote Reference marks
                .replace(/[.,:;\s]+$/, "") //
            );
          })
          .join("")
          .replaceAll("\n", " ");
      }
      tf.contents = result;
    });
};

TextFrame.prototype.area = function () {
  //Top/Bottom Left/Right y/x  Units: pt
  let [tly, tlx, bry, brx] = this.geometricBounds;
  return (bry - tly) * (brx - tlx);
};

/**
 * Searching the biggest textframe on a page
 * @returns Biggest textframe on a page or undefined, if page is empty or the only text frame marked as "ERH_"
 */
Page.prototype.biggestTF = function () {
  // get the biggest TextFrame on the Page
  let ret = this.textFrames
    .everyItem()
    .getElements()
    .reduce((biggest, tf) => {
      if (tf.area() > (biggest?.area() || 0)) return tf;
      return biggest;
    }, null);
  if (!ret) return;
  if (String(ret?.label || "ERH_").startsWith("ERH_")) return; //Check whether the return textframe is for running header
  return ret;
};

Page.prototype.emptyPages = function () {
  this.getElements()
    .map((p) => p.biggestTF())
    .filter((tf) => !!tf && tf.isValid && tf.lines.length === 0)
    .map((tf) =>
      tf.parentPage.textFrames
        .everyItem()
        .getElements()
        .filter((tfx) => tfx.label.startsWith("ERH_"))
        .forEach((tfx) => (tfx.contents = ""))
    );
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
function alert(text, head) {
  if ("string" === typeof text) text = text.split("\n");

  const dialog = app.dialogs.add();
  dialog.name = head || "";
  const col = dialog.dialogColumns.add();

  text.forEach((line) => {
    col.staticTexts.add().staticLabel = String(line);
  });

  dialog.canCancel = false;
  dialog.show();
  dialog.destroy();
  return;
}

/**
 * ERH2024v2 panel script version
 */
app.activeDocument.masterSpreads.everyItem().pages.everyItem().ERHMarker();
let pgs = app.activeDocument.pages.everyItem();
pgs.removeOverride();
pgs.ERHOverride();
pgs.textFrames.ERHRebuild();
pgs.emptyPages();
